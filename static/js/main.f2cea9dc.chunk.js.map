{"version":3,"sources":["components/Dashboard.js","components/game/IndicationPanel.js","components/game/CellView.js","components/game/MineFieldView.js","engine/Cell.js","engine/MineField.js","engine/Engine.js","components/game/Game.js","components/App.js","serviceWorker.js","index.js"],"names":["Dashboard","state","width","height","mines","mode","err","this","props","setState","event","target","value","name","isNaN","preventDefault","validate","newState","onSubmit","checked","onChangeMode","maxWidth","maxHeight","maxMines","Math","floor","className","handleSubmit","type","onChange","handleInputChange","label","handleCheckboxChange","disabled","pendingRequest","Component","flags","message","color","text","x","y","cell","onOpen","onToggleFlag","coverClassList","isOpen","push","isExploded","isFlagged","isMined","minesAround","join","onClick","e","stopPropagation","shiftKey","cells","onCellOpen","onCellToggleFlag","cellSize","map","row","i","key","j","style","CellView","Cell","isFull","ret","Minefield","createMineSet","createField","flagSet","Set","mineSet","Array","forEach","mine","add","hash","random","has","mineFieldData","getMinesAround","getNeighbours","reduce","sum","el","getCell","delete","full","raw","getCellView","size","_cellCount","Engine","field","godMode","openedCells","MineField","status","showFull","getCellsToShow","flagsCount","processLoose","processOpen","getViewState","minesCount","toggleFlag","checkWin","stack","length","currentInd","pop","ind","item","cellsCount","Game","createNewGame","prevProps","engine","inProgress","setGodMode","max","min","window","innerWidth","innerHeight","openCell","toggleFlagCell","IndicationPanel","isWin","isLost","MineFieldView","App","params","newGame","changeMode","PureComponent","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f2cea9dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Dashboard extends Component {\r\n    state = {\r\n        width: 0,\r\n        height: 0,\r\n        mines: 0,\r\n        mode: false,\r\n        err: '',\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { width, height, mines, mode } = this.props;\r\n        this.setState({ width, height, mines, mode });\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        if (!isNaN(value) && value >= 0) {\r\n            this.setState({ [name]: value });\r\n        }\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        if (this.validate()) {\r\n            const newState = { ...this.state, mode: false, err: '' };\r\n            this.setState(newState);\r\n            this.props.onSubmit(newState);\r\n        }\r\n    }\r\n\r\n    handleCheckboxChange(event) {\r\n        this.setState({ mode: event.target.checked });\r\n        this.props.onChangeMode(event.target.checked);\r\n    }\r\n\r\n    validate() {\r\n        const { width, height, mines } = this.state;\r\n        if (width <= 0) {\r\n            this.setState({ err: `Width shoud be a positive number` });\r\n            return false;\r\n        }\r\n\r\n        if (width > this.props.maxWidth) {\r\n            this.setState({ err: `Max width is ${this.props.maxWidth}` });\r\n            return false;\r\n        }\r\n\r\n        if (height <= 0) {\r\n            this.setState({ err: `Height shoud be a positive number` });\r\n            return false;\r\n        }\r\n\r\n        if (height > this.props.maxHeight) {\r\n            this.setState({ err: `Max height is ${this.props.maxHeight}` });\r\n            return false;\r\n        }\r\n\r\n        const maxMines = Math.floor((width * height) / 2);\r\n\r\n        if (maxMines < mines) {\r\n            this.setState({\r\n                err: `Max count of mines is ${maxMines} - the count of cells divided by 2`,\r\n            });\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <form onSubmit={(event) => this.handleSubmit(event)}>\r\n                    <div className=\"dasboard-row\">\r\n                        <label>\r\n                            width:\r\n                            <input\r\n                                name=\"width\"\r\n                                type=\"text\"\r\n                                value={this.state.width}\r\n                                onChange={(event) =>\r\n                                    this.handleInputChange(event)\r\n                                }\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            height:\r\n                            <input\r\n                                name=\"height\"\r\n                                type=\"text\"\r\n                                value={this.state.height}\r\n                                onChange={(event) =>\r\n                                    this.handleInputChange(event)\r\n                                }\r\n                            />\r\n                        </label>\r\n                        <label>\r\n                            mines:\r\n                            <input\r\n                                name=\"mines\"\r\n                                type=\"text\"\r\n                                value={this.state.mines}\r\n                                onChange={(event) =>\r\n                                    this.handleInputChange(event)\r\n                                }\r\n                            />\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"dashboard-row\">\r\n                        <label>\r\n                            <input\r\n                                name=\"mode\"\r\n                                label=\"superman\"\r\n                                type=\"checkbox\"\r\n                                value=\"Superman\"\r\n                                checked={this.state.mode}\r\n                                onChange={(event) =>\r\n                                    this.handleCheckboxChange(event)\r\n                                }\r\n                            />\r\n                            superman\r\n                        </label>\r\n\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={this.state.pendingRequest}>\r\n                            New game\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                <div className=\"dashboard-message\">{this.state.err}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nexport default ({ flags, message, color }) => {\r\n    return (\r\n        <div className=\"indication-panel\">\r\n            <div>Flags remained: {flags}</div>\r\n            <div className={color}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Fragment } from 'react';\r\n\r\nexport default ({ x, y, cell, onOpen, onToggleFlag }) => {\r\n    const onClick = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        if (e.shiftKey) {\r\n            onToggleFlag(x, y);\r\n        } else {\r\n            onOpen(x, y);\r\n        }\r\n    };\r\n\r\n    const renderMine = () => {\r\n        return <i className=\"fas fa-bomb\"></i>;\r\n    };\r\n    const renderFlag = () => {\r\n        return <i className=\"fas fa-flag\"></i>;\r\n    };\r\n\r\n    let text;\r\n\r\n    const coverClassList = ['state-fill'];\r\n\r\n    if (cell.isOpen) {\r\n        coverClassList.push(cell.isExploded ? 'exploded' : 'hidden');\r\n    }\r\n\r\n    text = cell.isFlagged\r\n        ? renderFlag()\r\n        : cell.isMined\r\n        ? renderMine()\r\n        : cell.minesAround || '';\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className={coverClassList.join(' ')}></div>\r\n            <div className=\"state-text\" onClick={onClick}>\r\n                {text}\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport CellView from './CellView';\r\nexport default ({ cells = [], onCellOpen, onCellToggleFlag, cellSize }) => {\r\n    const renderCells = () => {\r\n        return cells.map((row, i) => (\r\n            <tr key={i}>\r\n                {row.map((cell, j) => (\r\n                    <td\r\n                        className=\"mine-cell\"\r\n                        style={{\r\n                            width: `${cellSize}px`,\r\n                            height: `${cellSize}px`,\r\n                        }}\r\n                        key={j}>\r\n                        <CellView\r\n                            x={j}\r\n                            y={i}\r\n                            onOpen={onCellOpen}\r\n                            onToggleFlag={onCellToggleFlag}\r\n                            cell={cell}\r\n                        />\r\n                    </td>\r\n                ))}\r\n            </tr>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div className=\"mine-field\">\r\n            <table>\r\n                <tbody>{renderCells()}</tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n","export default class Cell {\r\n    constructor() {\r\n        this.isOpen = false;\r\n        this.isFlagged = false;\r\n        this.isMined = false;\r\n        this.minesAround = 0;\r\n    }\r\n\r\n    get isExploded() {\r\n        return this.isOpen && this.isMined && !this.isFlagged;\r\n    }\r\n\r\n    getCellView(isFull) {\r\n        const ret = {\r\n            isOpen: this.isOpen,\r\n            isFlagged: this.isFlagged,\r\n            isExploded: this.isExploded,\r\n        };\r\n        if (isFull || this.isOpen) {\r\n            ret.isMined = this.isMined;\r\n            ret.minesAround = this.minesAround;\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n","import Cell from './Cell';\r\n\r\nexport default class Minefield {\r\n    constructor({ width, height, mines }) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.createMineSet(mines);\r\n        this.createField();\r\n        this.flagSet = new Set();\r\n    }\r\n\r\n    createMineSet(mines) {\r\n        const mineSet = new Set();\r\n        if (mines instanceof Array) {\r\n            mines.forEach((mine) => mineSet.add(this.hash(mine.x, mine.y)));\r\n        } else {\r\n            const { width, height } = this;\r\n            for (let i = 0; i < mines; i++) {\r\n                let x, y, hash;\r\n                do {\r\n                    x = Math.floor(Math.random() * width);\r\n                    y = Math.floor(Math.random() * height);\r\n                    hash = this.hash(x, y);\r\n                } while (mineSet.has(hash));\r\n                mineSet.add(hash);\r\n            }\r\n        }\r\n        this.mineSet = mineSet;\r\n    }\r\n\r\n    get minesCount() {\r\n        return this.mineSet.size;\r\n    }\r\n\r\n    get flagsCount() {\r\n        return this.flagSet.size;\r\n    }\r\n\r\n    get cellsCount() {\r\n        if (!this._cellCount) {\r\n            this._cellCount = this.width * this.height;\r\n        }\r\n        return this._cellCount;\r\n    }\r\n\r\n    hash(x, y) {\r\n        return `${x}_${y}`;\r\n    }\r\n\r\n    createField() {\r\n        const { width, height } = this;\r\n        this.mineFieldData = [];\r\n        for (let i = 0; i < height; i++) {\r\n            const row = [];\r\n            for (let j = 0; j < width; j++) {\r\n                const cell = new Cell();\r\n                cell.minesAround = this.getMinesAround(j, i);\r\n                cell.isMined = this.isMined(j, i);\r\n                row.push(cell);\r\n            }\r\n            this.mineFieldData.push(row);\r\n        }\r\n    }\r\n\r\n    getMinesAround(x, y) {\r\n        return this.getNeighbours(x, y).reduce(\r\n            (sum, el) => sum + this.mineSet.has(this.hash(el.x, el.y)),\r\n            0\r\n        );\r\n    }\r\n\r\n    getNeighbours(x, y) {\r\n        const { width, height } = this;\r\n        let ret = [];\r\n        for (let i = y - 1; i < y + 2; i++)\r\n            for (let j = x - 1; j < x + 2; j++) {\r\n                if (\r\n                    j >= 0 &&\r\n                    j < width &&\r\n                    i >= 0 &&\r\n                    i < height &&\r\n                    !(j === x && i === y)\r\n                ) {\r\n                    ret.push({ x: j, y: i });\r\n                }\r\n            }\r\n        return ret;\r\n    }\r\n\r\n    getCell(x, y) {\r\n        return this.mineFieldData[y][x];\r\n    }\r\n\r\n    isMined(x, y) {\r\n        const hash = this.hash(x, y);\r\n        return this.mineSet.has(hash);\r\n    }\r\n\r\n    isFlagged(x, y) {\r\n        const hash = this.hash(x, y);\r\n        return this.flagSet.has(hash);\r\n    }\r\n\r\n    toggleFlag(x, y) {\r\n        const hash = this.hash(x, y);\r\n        const cell = this.getCell(x, y);\r\n\r\n        if (this.isFlagged(x, y)) {\r\n            this.flagSet.delete(hash);\r\n            cell.isFlagged = false;\r\n        } else {\r\n            this.flagSet.add(hash);\r\n            cell.isFlagged = true;\r\n        }\r\n    }\r\n\r\n    getCellsToShow(full) {\r\n        return this.mineFieldData.map((raw) =>\r\n            raw.map((cell) => cell.getCellView(full))\r\n        );\r\n    }\r\n}\r\n","import MineField from './MineField';\r\n\r\nconst GAME_STARTED = 0;\r\nconst GAME_WIN = 1;\r\nconst GAME_LOST = 2;\r\n\r\nclass Engine {\r\n    constructor({ width, height, mines, mode, field }) {\r\n        this.godMode = mode;\r\n        this.openedCells = 0;\r\n        this.field = field || new MineField({ width, height, mines });\r\n        this.status = GAME_STARTED;\r\n    }\r\n\r\n    get inProgress() {\r\n        return this.status === GAME_STARTED;\r\n    }\r\n\r\n    get isWin() {\r\n        return this.status === GAME_WIN;\r\n    }\r\n    get isLost() {\r\n        return this.status === GAME_LOST;\r\n    }\r\n\r\n    getViewState() {\r\n        const showFull =\r\n            this.godMode ||\r\n            this.status === GAME_WIN ||\r\n            this.status === GAME_LOST;\r\n\r\n        return {\r\n            status: this.status,\r\n            message: this.message,\r\n            cells: this.field.getCellsToShow(showFull),\r\n            flags: this.field.flagsCount,\r\n        };\r\n    }\r\n\r\n    openCell(x, y) {\r\n        const { isMined, isFlagged, isOpen } = this.field.getCell(x, y);\r\n        if (!isFlagged && isMined) {\r\n            this.processLoose(x, y);\r\n        } else if (!isFlagged && !isOpen) {\r\n            this.processOpen(x, y);\r\n        }\r\n        return this.getViewState();\r\n    }\r\n\r\n    toggleFlagCell(x, y) {\r\n        const { field } = this;\r\n        const cell = field.getCell(x, y);\r\n\r\n        if (!cell.isFlagged && field.flagsCount === field.minesCount) {\r\n            this.message =\r\n                'You are out of flags! You can pick up any unnecessary set flag';\r\n        } else {\r\n            field.toggleFlag(x, y);\r\n            this.message = '';\r\n            this.checkWin();\r\n        }\r\n        return this.getViewState();\r\n    }\r\n\r\n    setGodMode(mode) {\r\n        this.godMode = mode;\r\n        this.message = `You turn god mode ${mode ? 'on' : 'off'}`;\r\n        return this.getViewState();\r\n    }\r\n\r\n    processLoose(x, y) {\r\n        this.field.getCell(x, y).isOpen = true;\r\n        this.status = GAME_LOST;\r\n        this.message = 'Sorry, you are lost the game :(';\r\n    }\r\n\r\n    processOpen(x, y) {\r\n        const stack = [{ x, y }];\r\n        let cell;\r\n        while (stack.length) {\r\n            const currentInd = stack.pop();\r\n            cell = this.field.getCell(currentInd.x, currentInd.y);\r\n            cell.isOpen = true;\r\n            this.openedCells++;\r\n            if (!cell.minesAround) {\r\n                this.field\r\n                    .getNeighbours(currentInd.x, currentInd.y)\r\n                    .forEach((ind) => {\r\n                        const item = this.field.getCell(ind.x, ind.y);\r\n                        if (!item.isOpen) {\r\n                            item.isOpen = true;\r\n                            stack.push(ind);\r\n                        }\r\n                    });\r\n            }\r\n        }\r\n        this.message = '';\r\n        this.checkWin();\r\n    }\r\n\r\n    checkWin() {\r\n        if (\r\n            this.openedCells + this.field.flagsCount ===\r\n            this.field.cellsCount\r\n        ) {\r\n            this.status = GAME_WIN;\r\n            this.message = 'Congatulations! You win the game :)';\r\n        }\r\n    }\r\n}\r\n\r\nexport default Engine;\r\n","import React, { Component } from 'react';\r\nimport IndicationPanel from './IndicationPanel';\r\nimport MineFieldView from './MineFieldView';\r\nimport Engine from '../../engine/Engine';\r\nclass Game extends Component {\r\n    state = {};\r\n    componentDidMount() {\r\n        this.createNewGame();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (\r\n            this.engine.inProgress &&\r\n            prevProps &&\r\n            prevProps.mode !== this.props.mode\r\n        ) {\r\n            this.setState(this.engine.setGodMode(this.props.mode));\r\n        }\r\n    }\r\n\r\n    createNewGame() {\r\n        const MAX_CELL_SIZE = 50;\r\n        const MIN_CELL_SIZE = 20;\r\n        const { width, height, mines, mode } = this.props;\r\n\r\n        //TODO: make more relevant calculation\r\n        const cellSize = Math.max(\r\n            Math.min(\r\n                (window.innerWidth - 20) / width,\r\n                window.innerHeight / 2 / height,\r\n                MAX_CELL_SIZE\r\n            ),\r\n            MIN_CELL_SIZE\r\n        );\r\n\r\n        this.engine = new Engine({ width, height, mines, mode });\r\n        const state = this.engine.getViewState();\r\n        this.setState({ ...state, cellSize });\r\n    }\r\n\r\n    onCellOpen(x, y) {\r\n        if (!this.engine.inProgress) {\r\n            return;\r\n        }\r\n        this.setState(this.engine.openCell(x, y));\r\n    }\r\n\r\n    onCellToggleFlag(x, y) {\r\n        if (!this.engine.inProgress) {\r\n            return;\r\n        }\r\n        this.setState(this.engine.toggleFlagCell(x, y));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <IndicationPanel\r\n                    flags={this.props.mines - this.state.flags}\r\n                    message={this.state.message}\r\n                    color={\r\n                        this.engine &&\r\n                        (this.engine.isWin\r\n                            ? 'green'\r\n                            : this.engine.isLost\r\n                            ? 'red'\r\n                            : '')\r\n                    }\r\n                />\r\n                <MineFieldView\r\n                    cells={this.state.cells}\r\n                    cellSize={this.state.cellSize}\r\n                    onCellOpen={(x, y) => this.onCellOpen(x, y)}\r\n                    onCellToggleFlag={(x, y) => this.onCellToggleFlag(x, y)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import React, { PureComponent } from 'react';\nimport './App.css';\nimport './Dashboard';\nimport Dashboard from './Dashboard';\nimport Game from './game/Game';\n\nclass App extends PureComponent {\n    state = { width: 12, height: 8, mines: 9, mode: false, key: 1 };\n\n    newGame(params) {\n        const key = this.state.key + 1;\n        this.setState({ ...params, key });\n    }\n\n    changeMode(mode) {\n        this.setState({ mode });\n    }\n\n    render() {\n        const { state } = this;\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">Minesweeper</header>\n                <Dashboard\n                    maxWidth={300}\n                    maxHeight={300}\n                    width={this.state.width}\n                    height={this.state.height}\n                    mines={this.state.mines}\n                    mode={this.state.mode}\n                    onSubmit={(params) => this.newGame(params)}\n                    onChangeMode={(mode) => this.changeMode(mode)}\n                />\n                <Game {...state} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}